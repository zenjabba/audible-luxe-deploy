#!/bin/bash
set -euo pipefail

# Audible Luxe Setup Script
# This script sets up the Audible Luxe deployment system

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Print colored output
print_info() { echo -e "${GREEN}[INFO]${NC} $1"; }
print_error() { echo -e "${RED}[ERROR]${NC} $1"; }
print_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }

# Check if running as root
if [[ $EUID -eq 0 ]]; then
   print_error "This script should not be run as root!"
   exit 1
fi

print_info "Starting Audible Luxe deployment setup..."

# Check system requirements
print_info "Checking system requirements..."

# Check for curl
if ! command -v curl &> /dev/null; then
    print_error "curl is required but not installed. Please install curl first."
    exit 1
fi

# Check for git
if ! command -v git &> /dev/null; then
    print_error "git is required but not installed. Please install git first."
    exit 1
fi

# Check for Docker
if ! command -v docker &> /dev/null; then
    print_warning "Docker is not installed. Installing Docker..."
    
    # Detect OS
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        # Linux
        curl -fsSL https://get.docker.com -o get-docker.sh
        sudo sh get-docker.sh
        sudo usermod -aG docker $USER
        rm get-docker.sh
        print_info "Docker installed. You may need to log out and back in for group changes to take effect."
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS
        print_error "Please install Docker Desktop for macOS from https://www.docker.com/products/docker-desktop"
        exit 1
    else
        print_error "Unsupported operating system: $OSTYPE"
        exit 1
    fi
fi

# Check for Docker Compose
if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
    print_warning "Docker Compose is not installed. Installing Docker Compose..."
    
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        # Install Docker Compose plugin
        sudo apt-get update
        sudo apt-get install -y docker-compose-plugin
    else
        print_error "Docker Compose is required. Please ensure Docker Desktop is installed with Compose support."
        exit 1
    fi
fi

# Set installation directory
INSTALL_DIR="${AUDIBLE_LUXE_DIR:-$HOME/audible-luxe}"
print_info "Installation directory: $INSTALL_DIR"

# Clone or update repository
if [ -d "$INSTALL_DIR" ]; then
    print_info "Installation directory exists. Updating..."
    cd "$INSTALL_DIR"
    git pull origin main
else
    print_info "Cloning Audible Luxe deployment repository..."
    git clone https://github.com/zenjabba/audible-luxe-deploy.git "$INSTALL_DIR"
    cd "$INSTALL_DIR"
fi

# Create necessary directories
print_info "Creating necessary directories..."
mkdir -p data logs

# Check for environment configuration
if [ ! -f .env ]; then
    print_info "Creating environment configuration..."
    
    # Generate a secure session secret
    SESSION_SECRET=$(openssl rand -hex 32)
    
    cat > .env << EOF
# Audible Luxe Environment Configuration
# Generated by setup script on $(date)

# V3 API Configuration
V3_API_BASE_URL=your_v3_api_base_url_here
V3_API_LICENSE_KEY=your_v3_api_license_key_here

# Session Configuration
SESSION_SECRET=$SESSION_SECRET

# Logging
LOG_LEVEL=info
EOF
    
    print_warning "Environment file created. Please edit .env and add your V3 API credentials:"
    print_warning "  - V3_API_BASE_URL"
    print_warning "  - V3_API_LICENSE_KEY"
    echo
    read -p "Press Enter to continue after updating .env file..."
fi

# Check if .env has been configured
if grep -q "your_v3_api_base_url_here" .env || grep -q "your_v3_api_license_key_here" .env; then
    print_error "Please configure your V3 API credentials in the .env file before continuing."
    exit 1
fi

# Create docker-compose override if it doesn't exist
if [ ! -f docker-compose.override.yml ] && [ -f docker-compose.override.yml.example ]; then
    print_info "Creating docker-compose.override.yml from example..."
    cp docker-compose.override.yml.example docker-compose.override.yml
fi

# Pull latest images
print_info "Pulling latest Docker images..."
docker-compose pull

# Start services
print_info "Starting Audible Luxe services..."
docker-compose up -d

# Wait for services to be ready
print_info "Waiting for services to start..."
sleep 10

# Check service status
print_info "Checking service status..."
docker-compose ps

# Show logs for debugging if needed
if ! docker-compose ps | grep -q "Up"; then
    print_error "Some services failed to start. Showing logs..."
    docker-compose logs --tail=50
    exit 1
fi

# Success message
print_info "Audible Luxe deployment completed successfully!"
print_info "Access the application at: http://localhost"
print_info ""
print_info "Useful commands:"
print_info "  cd $INSTALL_DIR"
print_info "  docker-compose ps          # Check service status"
print_info "  docker-compose logs -f     # View logs"
print_info "  docker-compose down        # Stop services"
print_info "  docker-compose up -d       # Start services"